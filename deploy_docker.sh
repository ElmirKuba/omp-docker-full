#!/bin/bash

# chmod +x deploy_docker.sh 
# DEPLOY_ENV=dev1111 DEPLOY_BRANCH=develop  ./deploy_docker.sh 

set -e

echo "üöÄ –°—Ç–∞—Ä—Ç –¥–µ–ø–ª–æ—è: –æ–∫—Ä—É–∂–µ–Ω–∏–µ = $DEPLOY_ENV, –≤–µ—Ç–∫–∞ = $DEPLOY_BRANCH"

# –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –≤–µ—Ç–∫–∞ –∑–∞–¥–∞–Ω—ã
if [[ -z "$DEPLOY_ENV" || -z "$DEPLOY_BRANCH" ]]; then
  echo "‚ùå DEPLOY_ENV –∏–ª–∏ DEPLOY_BRANCH –Ω–µ –∑–∞–¥–∞–Ω—ã"
  exit 1
fi

# 0) –ó–∞–¥–∞—ë–º —Ü–µ–ª–µ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
# –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–∑ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Å—Ä–µ–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:
#   DEPLOY_ENV=test1111 ./deploy.sh
# –∏–ª–∏ –±—É–¥–µ—Ç –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é prod7777
DEPLOY_ENV="${DEPLOY_ENV:-prod7777}"
PORT="${DEPLOY_ENV//[!0-9]/}"

check_and_create_dir() {
  local dir_path="$1"

  # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
  echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir_path}: "

  if [ -d "${dir_path}" ]; then
    # –ï—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    echo "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç (skip)."
  else
    # –ï—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—é..."
    if mkdir -p "${dir_path}"; then
      echo "‚úÖ ${dir_path} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
    else
      echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ${dir_path}!"
      # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —Å –æ—à–∏–±–∫–æ–π:
      # exit 1
    fi
  fi
}

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–≤—É—Ö –ø—É—Ç–µ–π
check_and_create_dir "/home/deploy"
check_and_create_dir "/home/deploy/${DEPLOY_ENV}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ git
echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ git: "
if command -v git >/dev/null 2>&1; then
  echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (skip)."
else
  echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
  apt update
  apt install -y git
  if command -v git >/dev/null 2>&1; then
    echo "‚úÖ git —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å git!"
  fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ curl
echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ curl: "
if command -v curl >/dev/null 2>&1; then
  echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (skip)."
else
  echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
  apt update
  apt install -y curl
  if command -v curl >/dev/null 2>&1; then
    echo "‚úÖ curl —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å curl!"
  fi
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Docker
is_docker_fully_available() {
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ docker
  if ! command -v docker >/dev/null 2>&1; then
    return 1
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ docker
  if ! systemctl is-active --quiet docker 2>/dev/null && ! service docker status >/dev/null 2>&1; then
    return 1
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ containerd
  if ! systemctl is-active --quiet containerd 2>/dev/null; then
    return 1
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ docker API (—á–µ—Ä–µ–∑ info –∏–ª–∏ network ls)
  if ! docker info >/dev/null 2>&1 || ! docker network ls >/dev/null 2>&1; then
    return 1
  fi

  return 0
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker
if ! is_docker_fully_available; then
  echo "‚ùå Docker –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
  
  apt update
  apt upgrade -y

  cd /home/deploy/
  curl -fsSL https://get.docker.com -o get-docker.sh
  bash get-docker.sh

else
  echo "‚úÖ Docker –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∏—Å–ø—Ä–∞–≤–µ–Ω (skip)."
fi

cd "/home/deploy/${DEPLOY_ENV}"

# –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω ‚Äî –¥–µ–ª–∞–µ–º pull, –∏–Ω–∞—á–µ ‚Äî clone
if [ ! -d ".git" ]; then
  echo "‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º git clone –≤–µ—Ç–∫–∏ $DEPLOY_BRANCH..."
  git clone --depth=1 --branch "$DEPLOY_BRANCH" \
    git@github.com:ElmirKuba/omp-docker-full.git .
else
  echo "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ $DEPLOY_BRANCH..."
  git fetch origin "$DEPLOY_BRANCH" --depth=1
  git reset --hard "origin/$DEPLOY_BRANCH"
fi

echo -n "–°–æ–∑–¥–∞–Ω–∏–µ Docker-—Å–µ—Ç–∏ network_omp_server (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç): "
docker network create network_omp_server 2>/dev/null \
  && echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–ª–∏ —É–∂–µ –±—ã–ª–æ." \
  || echo "‚úÖ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º."

# –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env –ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏
ENV_FILE="/home/deploy/${DEPLOY_ENV}/.env"
echo -n "–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º OMP_SERVER_PORT=${PORT} –≤ ${ENV_FILE}: "
if sed -i -E "s/^OMP_SERVER_PORT=.*/OMP_SERVER_PORT=${PORT}/" "${ENV_FILE}"; then
  echo "‚úÖ"
else
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å OMP_SERVER_PORT –≤ ${ENV_FILE}!"
  exit 1
fi

docker compose down

docker compose -f "/home/deploy/${DEPLOY_ENV}/docker/compose-files/docker-compose.production.yml" \
  --env-file "/home/deploy/${DEPLOY_ENV}/.env" \
  up --build -d

echo
echo "‚è≥ –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'service_omp_server_prod' –≤ —Ç–µ—á–µ–Ω–∏–µ 45 —Å–µ–∫—É–Ω–¥..."

# –ó–∞–ø—É—Å–∫–∞–µ–º docker logs -f –≤ —Ñ–æ–Ω–µ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ tmp —Ñ–∞–π–ª
LOG_FILE="/tmp/omp_docker_logs_tmp.log"
> "$LOG_FILE" # –æ—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–æ–≤
docker logs -f service_omp_server_prod >> "$LOG_FILE" 2>&1 &
LOG_PID=$!

# 45-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä —Å –≤—ã–≤–æ–¥–æ–º –∏ –ª–æ–≥–∞–º–∏
for i in $(seq 45 -1 1); do
  printf "\r‚è≥ –û—Å—Ç–∞–ª–æ—Å—å %2d —Å–µ–∫... " "$i"

  # –ü–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤
  tail -n +1 "$LOG_FILE"

  # –°—Ç–∏—Ä–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
  > "$LOG_FILE"

  sleep 1
done

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–æ–≤
kill "$LOG_PID" >/dev/null 2>&1 || true
wait "$LOG_PID" 2>/dev/null || true

echo -e "\n‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'service_omp_server_prod' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω."